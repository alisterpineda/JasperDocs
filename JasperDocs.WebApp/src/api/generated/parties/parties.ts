/**
 * Generated by orval v7.14.0 🍺
 * Do not edit manually.
 * JasperDocs.WebApi | v1
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  CreateParty,
  GetApiPartiesParams,
  GetPartyResponse,
  PaginatedResponseOfPartyListItemDto,
  ProblemDetails,
  UpdatePartyRequest
} from '../api.schemas';

import { customAxiosInstance } from '../../axios-instance';




export const getApiParties = (
    params?: GetApiPartiesParams,
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<PaginatedResponseOfPartyListItemDto>(
      {url: `/api/Parties`, method: 'GET',
        params, signal
    },
      );
    }
  



export const getGetApiPartiesQueryKey = (params?: GetApiPartiesParams,) => {
    return [
    `/api/Parties`, ...(params ? [params]: [])
    ] as const;
    }

    
export const getGetApiPartiesQueryOptions = <TData = Awaited<ReturnType<typeof getApiParties>>, TError = unknown>(params?: GetApiPartiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiParties>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiPartiesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiParties>>> = ({ signal }) => getApiParties(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiParties>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiPartiesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiParties>>>
export type GetApiPartiesQueryError = unknown


export function useGetApiParties<TData = Awaited<ReturnType<typeof getApiParties>>, TError = unknown>(
 params: undefined |  GetApiPartiesParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiParties>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiParties>>,
          TError,
          Awaited<ReturnType<typeof getApiParties>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiParties<TData = Awaited<ReturnType<typeof getApiParties>>, TError = unknown>(
 params?: GetApiPartiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiParties>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiParties>>,
          TError,
          Awaited<ReturnType<typeof getApiParties>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiParties<TData = Awaited<ReturnType<typeof getApiParties>>, TError = unknown>(
 params?: GetApiPartiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiParties>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiParties<TData = Awaited<ReturnType<typeof getApiParties>>, TError = unknown>(
 params?: GetApiPartiesParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiParties>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiPartiesQueryOptions(params,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postApiParties = (
    createParty: CreateParty,
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<void>(
      {url: `/api/Parties`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: createParty, signal
    },
      );
    }
  


export const getPostApiPartiesMutationOptions = <TError = string,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiParties>>, TError,{data: CreateParty}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiParties>>, TError,{data: CreateParty}, TContext> => {

const mutationKey = ['postApiParties'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiParties>>, {data: CreateParty}> = (props) => {
          const {data} = props ?? {};

          return  postApiParties(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiPartiesMutationResult = NonNullable<Awaited<ReturnType<typeof postApiParties>>>
    export type PostApiPartiesMutationBody = CreateParty
    export type PostApiPartiesMutationError = string

    export const usePostApiParties = <TError = string,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiParties>>, TError,{data: CreateParty}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiParties>>,
        TError,
        {data: CreateParty},
        TContext
      > => {

      const mutationOptions = getPostApiPartiesMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    export const getApiPartiesId = (
    id: string,
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<GetPartyResponse>(
      {url: `/api/Parties/${id}`, method: 'GET', signal
    },
      );
    }
  



export const getGetApiPartiesIdQueryKey = (id?: string,) => {
    return [
    `/api/Parties/${id}`
    ] as const;
    }

    
export const getGetApiPartiesIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiPartiesId>>, TError = ProblemDetails>(id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPartiesId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiPartiesIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiPartiesId>>> = ({ signal }) => getApiPartiesId(id, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiPartiesId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiPartiesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiPartiesId>>>
export type GetApiPartiesIdQueryError = ProblemDetails


export function useGetApiPartiesId<TData = Awaited<ReturnType<typeof getApiPartiesId>>, TError = ProblemDetails>(
 id: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPartiesId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiPartiesId>>,
          TError,
          Awaited<ReturnType<typeof getApiPartiesId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiPartiesId<TData = Awaited<ReturnType<typeof getApiPartiesId>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPartiesId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiPartiesId>>,
          TError,
          Awaited<ReturnType<typeof getApiPartiesId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiPartiesId<TData = Awaited<ReturnType<typeof getApiPartiesId>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPartiesId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiPartiesId<TData = Awaited<ReturnType<typeof getApiPartiesId>>, TError = ProblemDetails>(
 id: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiPartiesId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiPartiesIdQueryOptions(id,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putApiPartiesId = (
    id: string,
    updatePartyRequest: UpdatePartyRequest,
 ) => {
      
      
      return customAxiosInstance<void>(
      {url: `/api/Parties/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: updatePartyRequest
    },
      );
    }
  


export const getPutApiPartiesIdMutationOptions = <TError = string | ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiPartiesId>>, TError,{id: string;data: UpdatePartyRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof putApiPartiesId>>, TError,{id: string;data: UpdatePartyRequest}, TContext> => {

const mutationKey = ['putApiPartiesId'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiPartiesId>>, {id: string;data: UpdatePartyRequest}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiPartiesId(id,data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PutApiPartiesIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiPartiesId>>>
    export type PutApiPartiesIdMutationBody = UpdatePartyRequest
    export type PutApiPartiesIdMutationError = string | ProblemDetails

    export const usePutApiPartiesId = <TError = string | ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiPartiesId>>, TError,{id: string;data: UpdatePartyRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof putApiPartiesId>>,
        TError,
        {id: string;data: UpdatePartyRequest},
        TContext
      > => {

      const mutationOptions = getPutApiPartiesIdMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    