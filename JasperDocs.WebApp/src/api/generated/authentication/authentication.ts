/**
 * Generated by orval v7.14.0 🍺
 * Do not edit manually.
 * JasperDocs.WebApi | v1
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  AccessTokenResponse,
  GetCurrentUserInfoResponse,
  LoginRequest,
  LogoutRequest,
  ProblemDetails,
  RefreshRequest
} from '../api.schemas';

import { customAxiosInstance } from '../../axios-instance';




export const postApiLogin = (
    loginRequest: LoginRequest,
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<AccessTokenResponse>(
      {url: `/api/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: loginRequest, signal
    },
      );
    }
  


export const getPostApiLoginMutationOptions = <TError = ProblemDetails | ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiLogin>>, TError,{data: LoginRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiLogin>>, TError,{data: LoginRequest}, TContext> => {

const mutationKey = ['postApiLogin'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiLogin>>, {data: LoginRequest}> = (props) => {
          const {data} = props ?? {};

          return  postApiLogin(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postApiLogin>>>
    export type PostApiLoginMutationBody = LoginRequest
    export type PostApiLoginMutationError = ProblemDetails | ProblemDetails

    export const usePostApiLogin = <TError = ProblemDetails | ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiLogin>>, TError,{data: LoginRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiLogin>>,
        TError,
        {data: LoginRequest},
        TContext
      > => {

      const mutationOptions = getPostApiLoginMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    export const postApiRefresh = (
    refreshRequest: RefreshRequest,
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<AccessTokenResponse>(
      {url: `/api/refresh`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: refreshRequest, signal
    },
      );
    }
  


export const getPostApiRefreshMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRefresh>>, TError,{data: RefreshRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiRefresh>>, TError,{data: RefreshRequest}, TContext> => {

const mutationKey = ['postApiRefresh'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiRefresh>>, {data: RefreshRequest}> = (props) => {
          const {data} = props ?? {};

          return  postApiRefresh(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiRefreshMutationResult = NonNullable<Awaited<ReturnType<typeof postApiRefresh>>>
    export type PostApiRefreshMutationBody = RefreshRequest
    export type PostApiRefreshMutationError = ProblemDetails

    export const usePostApiRefresh = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiRefresh>>, TError,{data: RefreshRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiRefresh>>,
        TError,
        {data: RefreshRequest},
        TContext
      > => {

      const mutationOptions = getPostApiRefreshMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    export const postApiLogout = (
    logoutRequest: LogoutRequest,
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<void>(
      {url: `/api/logout`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: logoutRequest, signal
    },
      );
    }
  


export const getPostApiLogoutMutationOptions = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiLogout>>, TError,{data: LogoutRequest}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiLogout>>, TError,{data: LogoutRequest}, TContext> => {

const mutationKey = ['postApiLogout'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiLogout>>, {data: LogoutRequest}> = (props) => {
          const {data} = props ?? {};

          return  postApiLogout(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiLogoutMutationResult = NonNullable<Awaited<ReturnType<typeof postApiLogout>>>
    export type PostApiLogoutMutationBody = LogoutRequest
    export type PostApiLogoutMutationError = ProblemDetails

    export const usePostApiLogout = <TError = ProblemDetails,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiLogout>>, TError,{data: LogoutRequest}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiLogout>>,
        TError,
        {data: LogoutRequest},
        TContext
      > => {

      const mutationOptions = getPostApiLogoutMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    export const getApiUsersMeInfo = (
    
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<GetCurrentUserInfoResponse>(
      {url: `/api/users/me/info`, method: 'GET', signal
    },
      );
    }
  



export const getGetApiUsersMeInfoQueryKey = () => {
    return [
    `/api/users/me/info`
    ] as const;
    }

    
export const getGetApiUsersMeInfoQueryOptions = <TData = Awaited<ReturnType<typeof getApiUsersMeInfo>>, TError = ProblemDetails | ProblemDetails>( options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersMeInfo>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiUsersMeInfoQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiUsersMeInfo>>> = ({ signal }) => getApiUsersMeInfo(signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiUsersMeInfo>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiUsersMeInfoQueryResult = NonNullable<Awaited<ReturnType<typeof getApiUsersMeInfo>>>
export type GetApiUsersMeInfoQueryError = ProblemDetails | ProblemDetails


export function useGetApiUsersMeInfo<TData = Awaited<ReturnType<typeof getApiUsersMeInfo>>, TError = ProblemDetails | ProblemDetails>(
  options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersMeInfo>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersMeInfo>>,
          TError,
          Awaited<ReturnType<typeof getApiUsersMeInfo>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsersMeInfo<TData = Awaited<ReturnType<typeof getApiUsersMeInfo>>, TError = ProblemDetails | ProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersMeInfo>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiUsersMeInfo>>,
          TError,
          Awaited<ReturnType<typeof getApiUsersMeInfo>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiUsersMeInfo<TData = Awaited<ReturnType<typeof getApiUsersMeInfo>>, TError = ProblemDetails | ProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersMeInfo>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiUsersMeInfo<TData = Awaited<ReturnType<typeof getApiUsersMeInfo>>, TError = ProblemDetails | ProblemDetails>(
  options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiUsersMeInfo>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiUsersMeInfoQueryOptions(options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



