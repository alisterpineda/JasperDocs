/**
 * Generated by orval v7.14.0 🍺
 * Do not edit manually.
 * JasperDocs.WebApi | v1
 * OpenAPI spec version: 1.0.0
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query';
import type {
  DataTag,
  DefinedInitialDataOptions,
  DefinedUseQueryResult,
  MutationFunction,
  QueryClient,
  QueryFunction,
  QueryKey,
  UndefinedInitialDataOptions,
  UseMutationOptions,
  UseMutationResult,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query';

import type {
  GetApiDocumentsIdParams,
  GetApiDocumentsParams,
  GetDocumentResponse,
  PaginatedResponseOfDocumentListItemDto,
  PostApiDocumentsBody,
  PostApiDocumentsVersionsBody,
  ProblemDetails
} from '../api.schemas';

import { customAxiosInstance } from '../../axios-instance';




export const getApiDocuments = (
    params?: GetApiDocumentsParams,
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<PaginatedResponseOfDocumentListItemDto>(
      {url: `/api/Documents`, method: 'GET',
        params, signal
    },
      );
    }
  



export const getGetApiDocumentsQueryKey = (params?: GetApiDocumentsParams,) => {
    return [
    `/api/Documents`, ...(params ? [params]: [])
    ] as const;
    }

    
export const getGetApiDocumentsQueryOptions = <TData = Awaited<ReturnType<typeof getApiDocuments>>, TError = unknown>(params?: GetApiDocumentsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDocuments>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiDocumentsQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiDocuments>>> = ({ signal }) => getApiDocuments(params, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiDocuments>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiDocumentsQueryResult = NonNullable<Awaited<ReturnType<typeof getApiDocuments>>>
export type GetApiDocumentsQueryError = unknown


export function useGetApiDocuments<TData = Awaited<ReturnType<typeof getApiDocuments>>, TError = unknown>(
 params: undefined |  GetApiDocumentsParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDocuments>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiDocuments>>,
          TError,
          Awaited<ReturnType<typeof getApiDocuments>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiDocuments<TData = Awaited<ReturnType<typeof getApiDocuments>>, TError = unknown>(
 params?: GetApiDocumentsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDocuments>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiDocuments>>,
          TError,
          Awaited<ReturnType<typeof getApiDocuments>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiDocuments<TData = Awaited<ReturnType<typeof getApiDocuments>>, TError = unknown>(
 params?: GetApiDocumentsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDocuments>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiDocuments<TData = Awaited<ReturnType<typeof getApiDocuments>>, TError = unknown>(
 params?: GetApiDocumentsParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDocuments>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiDocumentsQueryOptions(params,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postApiDocuments = (
    postApiDocumentsBody: PostApiDocumentsBody,
 signal?: AbortSignal
) => {
      
      const formData = new FormData();
if(postApiDocumentsBody.File !== undefined) {
 formData.append(`File`, postApiDocumentsBody.File)
 }

      return customAxiosInstance<void>(
      {url: `/api/Documents`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData, signal
    },
      );
    }
  


export const getPostApiDocumentsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiDocuments>>, TError,{data: PostApiDocumentsBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiDocuments>>, TError,{data: PostApiDocumentsBody}, TContext> => {

const mutationKey = ['postApiDocuments'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiDocuments>>, {data: PostApiDocumentsBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiDocuments(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiDocumentsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiDocuments>>>
    export type PostApiDocumentsMutationBody = PostApiDocumentsBody
    export type PostApiDocumentsMutationError = unknown

    export const usePostApiDocuments = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiDocuments>>, TError,{data: PostApiDocumentsBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiDocuments>>,
        TError,
        {data: PostApiDocumentsBody},
        TContext
      > => {

      const mutationOptions = getPostApiDocumentsMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    export const getApiDocumentsId = (
    id: string,
    params?: GetApiDocumentsIdParams,
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<GetDocumentResponse>(
      {url: `/api/Documents/${id}`, method: 'GET',
        params, signal
    },
      );
    }
  



export const getGetApiDocumentsIdQueryKey = (id?: string,
    params?: GetApiDocumentsIdParams,) => {
    return [
    `/api/Documents/${id}`, ...(params ? [params]: [])
    ] as const;
    }

    
export const getGetApiDocumentsIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiDocumentsId>>, TError = ProblemDetails>(id: string,
    params?: GetApiDocumentsIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDocumentsId>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiDocumentsIdQueryKey(id,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiDocumentsId>>> = ({ signal }) => getApiDocumentsId(id,params, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiDocumentsId>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiDocumentsIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiDocumentsId>>>
export type GetApiDocumentsIdQueryError = ProblemDetails


export function useGetApiDocumentsId<TData = Awaited<ReturnType<typeof getApiDocumentsId>>, TError = ProblemDetails>(
 id: string,
    params: undefined |  GetApiDocumentsIdParams, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDocumentsId>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiDocumentsId>>,
          TError,
          Awaited<ReturnType<typeof getApiDocumentsId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiDocumentsId<TData = Awaited<ReturnType<typeof getApiDocumentsId>>, TError = ProblemDetails>(
 id: string,
    params?: GetApiDocumentsIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDocumentsId>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiDocumentsId>>,
          TError,
          Awaited<ReturnType<typeof getApiDocumentsId>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiDocumentsId<TData = Awaited<ReturnType<typeof getApiDocumentsId>>, TError = ProblemDetails>(
 id: string,
    params?: GetApiDocumentsIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDocumentsId>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiDocumentsId<TData = Awaited<ReturnType<typeof getApiDocumentsId>>, TError = ProblemDetails>(
 id: string,
    params?: GetApiDocumentsIdParams, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDocumentsId>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiDocumentsIdQueryOptions(id,params,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postApiDocumentsVersions = (
    postApiDocumentsVersionsBody: PostApiDocumentsVersionsBody,
 signal?: AbortSignal
) => {
      
      const formData = new FormData();
if(postApiDocumentsVersionsBody.DocumentId !== undefined) {
 formData.append(`DocumentId`, postApiDocumentsVersionsBody.DocumentId)
 }
if(postApiDocumentsVersionsBody.Description !== undefined) {
 formData.append(`Description`, postApiDocumentsVersionsBody.Description)
 }
if(postApiDocumentsVersionsBody.File !== undefined) {
 formData.append(`File`, postApiDocumentsVersionsBody.File)
 }

      return customAxiosInstance<void>(
      {url: `/api/Documents/versions`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData, signal
    },
      );
    }
  


export const getPostApiDocumentsVersionsMutationOptions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiDocumentsVersions>>, TError,{data: PostApiDocumentsVersionsBody}, TContext>, }
): UseMutationOptions<Awaited<ReturnType<typeof postApiDocumentsVersions>>, TError,{data: PostApiDocumentsVersionsBody}, TContext> => {

const mutationKey = ['postApiDocumentsVersions'];
const {mutation: mutationOptions} = options ?
      options.mutation && 'mutationKey' in options.mutation && options.mutation.mutationKey ?
      options
      : {...options, mutation: {...options.mutation, mutationKey}}
      : {mutation: { mutationKey, }};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiDocumentsVersions>>, {data: PostApiDocumentsVersionsBody}> = (props) => {
          const {data} = props ?? {};

          return  postApiDocumentsVersions(data,)
        }

        


  return  { mutationFn, ...mutationOptions }}

    export type PostApiDocumentsVersionsMutationResult = NonNullable<Awaited<ReturnType<typeof postApiDocumentsVersions>>>
    export type PostApiDocumentsVersionsMutationBody = PostApiDocumentsVersionsBody
    export type PostApiDocumentsVersionsMutationError = unknown

    export const usePostApiDocumentsVersions = <TError = unknown,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiDocumentsVersions>>, TError,{data: PostApiDocumentsVersionsBody}, TContext>, }
 , queryClient?: QueryClient): UseMutationResult<
        Awaited<ReturnType<typeof postApiDocumentsVersions>>,
        TError,
        {data: PostApiDocumentsVersionsBody},
        TContext
      > => {

      const mutationOptions = getPostApiDocumentsVersionsMutationOptions(options);

      return useMutation(mutationOptions, queryClient);
    }
    export const getApiDocumentsVersionsVersionIdFile = (
    versionId: string,
 signal?: AbortSignal
) => {
      
      
      return customAxiosInstance<void>(
      {url: `/api/Documents/versions/${versionId}/file`, method: 'GET', signal
    },
      );
    }
  



export const getGetApiDocumentsVersionsVersionIdFileQueryKey = (versionId?: string,) => {
    return [
    `/api/Documents/versions/${versionId}/file`
    ] as const;
    }

    
export const getGetApiDocumentsVersionsVersionIdFileQueryOptions = <TData = Awaited<ReturnType<typeof getApiDocumentsVersionsVersionIdFile>>, TError = ProblemDetails>(versionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDocumentsVersionsVersionIdFile>>, TError, TData>>, }
) => {

const {query: queryOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiDocumentsVersionsVersionIdFileQueryKey(versionId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiDocumentsVersionsVersionIdFile>>> = ({ signal }) => getApiDocumentsVersionsVersionIdFile(versionId, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(versionId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiDocumentsVersionsVersionIdFile>>, TError, TData> & { queryKey: DataTag<QueryKey, TData, TError> }
}

export type GetApiDocumentsVersionsVersionIdFileQueryResult = NonNullable<Awaited<ReturnType<typeof getApiDocumentsVersionsVersionIdFile>>>
export type GetApiDocumentsVersionsVersionIdFileQueryError = ProblemDetails


export function useGetApiDocumentsVersionsVersionIdFile<TData = Awaited<ReturnType<typeof getApiDocumentsVersionsVersionIdFile>>, TError = ProblemDetails>(
 versionId: string, options: { query:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDocumentsVersionsVersionIdFile>>, TError, TData>> & Pick<
        DefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiDocumentsVersionsVersionIdFile>>,
          TError,
          Awaited<ReturnType<typeof getApiDocumentsVersionsVersionIdFile>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  DefinedUseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiDocumentsVersionsVersionIdFile<TData = Awaited<ReturnType<typeof getApiDocumentsVersionsVersionIdFile>>, TError = ProblemDetails>(
 versionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDocumentsVersionsVersionIdFile>>, TError, TData>> & Pick<
        UndefinedInitialDataOptions<
          Awaited<ReturnType<typeof getApiDocumentsVersionsVersionIdFile>>,
          TError,
          Awaited<ReturnType<typeof getApiDocumentsVersionsVersionIdFile>>
        > , 'initialData'
      >, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }
export function useGetApiDocumentsVersionsVersionIdFile<TData = Awaited<ReturnType<typeof getApiDocumentsVersionsVersionIdFile>>, TError = ProblemDetails>(
 versionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDocumentsVersionsVersionIdFile>>, TError, TData>>, }
 , queryClient?: QueryClient
  ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> }

export function useGetApiDocumentsVersionsVersionIdFile<TData = Awaited<ReturnType<typeof getApiDocumentsVersionsVersionIdFile>>, TError = ProblemDetails>(
 versionId: string, options?: { query?:Partial<UseQueryOptions<Awaited<ReturnType<typeof getApiDocumentsVersionsVersionIdFile>>, TError, TData>>, }
 , queryClient?: QueryClient 
 ):  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> } {

  const queryOptions = getGetApiDocumentsVersionsVersionIdFileQueryOptions(versionId,options)

  const query = useQuery(queryOptions, queryClient) as  UseQueryResult<TData, TError> & { queryKey: DataTag<QueryKey, TData, TError> };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



